// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: criptcoinvote/criptcoin.proto

package criptcoinvote

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criptcoinvote_criptcoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_criptcoinvote_criptcoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_criptcoinvote_criptcoin_proto_rawDescGZIP(), []int{0}
}

type CriptCoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CriptCoinReply) Reset() {
	*x = CriptCoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criptcoinvote_criptcoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriptCoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriptCoinReply) ProtoMessage() {}

func (x *CriptCoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_criptcoinvote_criptcoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriptCoinReply.ProtoReflect.Descriptor instead.
func (*CriptCoinReply) Descriptor() ([]byte, []int) {
	return file_criptcoinvote_criptcoin_proto_rawDescGZIP(), []int{1}
}

func (x *CriptCoinReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CriptCoinFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId string `protobuf:"bytes,1,opt,name=coinId,proto3" json:"coinId,omitempty"` //sigla da moeda ex: btc, eos...
}

func (x *CriptCoinFilter) Reset() {
	*x = CriptCoinFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criptcoinvote_criptcoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriptCoinFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriptCoinFilter) ProtoMessage() {}

func (x *CriptCoinFilter) ProtoReflect() protoreflect.Message {
	mi := &file_criptcoinvote_criptcoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriptCoinFilter.ProtoReflect.Descriptor instead.
func (*CriptCoinFilter) Descriptor() ([]byte, []int) {
	return file_criptcoinvote_criptcoin_proto_rawDescGZIP(), []int{2}
}

func (x *CriptCoinFilter) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

type CriptCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //id baseado na sigla da moeda
	Name                  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description           string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TotalApprovedVotes    uint32 `protobuf:"varint,5,opt,name=totalApprovedVotes,proto3" json:"totalApprovedVotes,omitempty"`       //total de likes
	TotalDisapprovedVotes uint32 `protobuf:"varint,6,opt,name=totalDisapprovedVotes,proto3" json:"totalDisapprovedVotes,omitempty"` //total deslikes
}

func (x *CriptCoin) Reset() {
	*x = CriptCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criptcoinvote_criptcoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriptCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriptCoin) ProtoMessage() {}

func (x *CriptCoin) ProtoReflect() protoreflect.Message {
	mi := &file_criptcoinvote_criptcoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriptCoin.ProtoReflect.Descriptor instead.
func (*CriptCoin) Descriptor() ([]byte, []int) {
	return file_criptcoinvote_criptcoin_proto_rawDescGZIP(), []int{3}
}

func (x *CriptCoin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CriptCoin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CriptCoin) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CriptCoin) GetTotalApprovedVotes() uint32 {
	if x != nil {
		return x.TotalApprovedVotes
	}
	return 0
}

func (x *CriptCoin) GetTotalDisapprovedVotes() uint32 {
	if x != nil {
		return x.TotalDisapprovedVotes
	}
	return 0
}

type CriptCoinList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CriptCoin `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CriptCoinList) Reset() {
	*x = CriptCoinList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_criptcoinvote_criptcoin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriptCoinList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriptCoinList) ProtoMessage() {}

func (x *CriptCoinList) ProtoReflect() protoreflect.Message {
	mi := &file_criptcoinvote_criptcoin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriptCoinList.ProtoReflect.Descriptor instead.
func (*CriptCoinList) Descriptor() ([]byte, []int) {
	return file_criptcoinvote_criptcoin_proto_rawDescGZIP(), []int{4}
}

func (x *CriptCoinList) GetItems() []*CriptCoin {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_criptcoinvote_criptcoin_proto protoreflect.FileDescriptor

var file_criptcoinvote_criptcoin_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2f,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x10,
	0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x0f,
	0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x32, 0xbd, 0x03, 0x0a, 0x0c, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x70, 0x69, 0x12, 0x45, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a,
	0x1c, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x1a, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x1a, 0x1d, 0x2e, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x1a, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x76, 0x6f, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_criptcoinvote_criptcoin_proto_rawDescOnce sync.Once
	file_criptcoinvote_criptcoin_proto_rawDescData = file_criptcoinvote_criptcoin_proto_rawDesc
)

func file_criptcoinvote_criptcoin_proto_rawDescGZIP() []byte {
	file_criptcoinvote_criptcoin_proto_rawDescOnce.Do(func() {
		file_criptcoinvote_criptcoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_criptcoinvote_criptcoin_proto_rawDescData)
	})
	return file_criptcoinvote_criptcoin_proto_rawDescData
}

var file_criptcoinvote_criptcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_criptcoinvote_criptcoin_proto_goTypes = []interface{}{
	(*EmptyParameter)(nil),  // 0: criptcoinvote.EmptyParameter
	(*CriptCoinReply)(nil),  // 1: criptcoinvote.CriptCoinReply
	(*CriptCoinFilter)(nil), // 2: criptcoinvote.CriptCoinFilter
	(*CriptCoin)(nil),       // 3: criptcoinvote.CriptCoin
	(*CriptCoinList)(nil),   // 4: criptcoinvote.CriptCoinList
}
var file_criptcoinvote_criptcoin_proto_depIdxs = []int32{
	3, // 0: criptcoinvote.CriptCoinList.items:type_name -> criptcoinvote.CriptCoin
	0, // 1: criptcoinvote.CriptCoinApi.List:input_type -> criptcoinvote.EmptyParameter
	0, // 2: criptcoinvote.CriptCoinApi.ListWithTotalVotes:input_type -> criptcoinvote.EmptyParameter
	2, // 3: criptcoinvote.CriptCoinApi.Find:input_type -> criptcoinvote.CriptCoinFilter
	3, // 4: criptcoinvote.CriptCoinApi.Insert:input_type -> criptcoinvote.CriptCoin
	3, // 5: criptcoinvote.CriptCoinApi.Update:input_type -> criptcoinvote.CriptCoin
	3, // 6: criptcoinvote.CriptCoinApi.Delete:input_type -> criptcoinvote.CriptCoin
	4, // 7: criptcoinvote.CriptCoinApi.List:output_type -> criptcoinvote.CriptCoinList
	4, // 8: criptcoinvote.CriptCoinApi.ListWithTotalVotes:output_type -> criptcoinvote.CriptCoinList
	3, // 9: criptcoinvote.CriptCoinApi.Find:output_type -> criptcoinvote.CriptCoin
	1, // 10: criptcoinvote.CriptCoinApi.Insert:output_type -> criptcoinvote.CriptCoinReply
	1, // 11: criptcoinvote.CriptCoinApi.Update:output_type -> criptcoinvote.CriptCoinReply
	1, // 12: criptcoinvote.CriptCoinApi.Delete:output_type -> criptcoinvote.CriptCoinReply
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_criptcoinvote_criptcoin_proto_init() }
func file_criptcoinvote_criptcoin_proto_init() {
	if File_criptcoinvote_criptcoin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_criptcoinvote_criptcoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criptcoinvote_criptcoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriptCoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criptcoinvote_criptcoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriptCoinFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criptcoinvote_criptcoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriptCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_criptcoinvote_criptcoin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriptCoinList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_criptcoinvote_criptcoin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_criptcoinvote_criptcoin_proto_goTypes,
		DependencyIndexes: file_criptcoinvote_criptcoin_proto_depIdxs,
		MessageInfos:      file_criptcoinvote_criptcoin_proto_msgTypes,
	}.Build()
	File_criptcoinvote_criptcoin_proto = out.File
	file_criptcoinvote_criptcoin_proto_rawDesc = nil
	file_criptcoinvote_criptcoin_proto_goTypes = nil
	file_criptcoinvote_criptcoin_proto_depIdxs = nil
}
