// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package criptcoinvote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CriptCoinApiClient is the client API for CriptCoinApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriptCoinApiClient interface {
	List(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*CriptCoinList, error)
	ListWithTotalVotes(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*CriptCoinList, error)
	Find(ctx context.Context, in *CriptCoinFilter, opts ...grpc.CallOption) (*CriptCoin, error)
	Insert(ctx context.Context, in *CriptCoin, opts ...grpc.CallOption) (*CriptCoinReply, error)
	Update(ctx context.Context, in *CriptCoin, opts ...grpc.CallOption) (*CriptCoinReply, error)
	Delete(ctx context.Context, in *CriptCoin, opts ...grpc.CallOption) (*CriptCoinReply, error)
}

type criptCoinApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCriptCoinApiClient(cc grpc.ClientConnInterface) CriptCoinApiClient {
	return &criptCoinApiClient{cc}
}

func (c *criptCoinApiClient) List(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*CriptCoinList, error) {
	out := new(CriptCoinList)
	err := c.cc.Invoke(ctx, "/criptcoinvote.CriptCoinApi/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criptCoinApiClient) ListWithTotalVotes(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*CriptCoinList, error) {
	out := new(CriptCoinList)
	err := c.cc.Invoke(ctx, "/criptcoinvote.CriptCoinApi/ListWithTotalVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criptCoinApiClient) Find(ctx context.Context, in *CriptCoinFilter, opts ...grpc.CallOption) (*CriptCoin, error) {
	out := new(CriptCoin)
	err := c.cc.Invoke(ctx, "/criptcoinvote.CriptCoinApi/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criptCoinApiClient) Insert(ctx context.Context, in *CriptCoin, opts ...grpc.CallOption) (*CriptCoinReply, error) {
	out := new(CriptCoinReply)
	err := c.cc.Invoke(ctx, "/criptcoinvote.CriptCoinApi/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criptCoinApiClient) Update(ctx context.Context, in *CriptCoin, opts ...grpc.CallOption) (*CriptCoinReply, error) {
	out := new(CriptCoinReply)
	err := c.cc.Invoke(ctx, "/criptcoinvote.CriptCoinApi/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criptCoinApiClient) Delete(ctx context.Context, in *CriptCoin, opts ...grpc.CallOption) (*CriptCoinReply, error) {
	out := new(CriptCoinReply)
	err := c.cc.Invoke(ctx, "/criptcoinvote.CriptCoinApi/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriptCoinApiServer is the server API for CriptCoinApi service.
// All implementations must embed UnimplementedCriptCoinApiServer
// for forward compatibility
type CriptCoinApiServer interface {
	List(context.Context, *EmptyParameter) (*CriptCoinList, error)
	ListWithTotalVotes(context.Context, *EmptyParameter) (*CriptCoinList, error)
	Find(context.Context, *CriptCoinFilter) (*CriptCoin, error)
	Insert(context.Context, *CriptCoin) (*CriptCoinReply, error)
	Update(context.Context, *CriptCoin) (*CriptCoinReply, error)
	Delete(context.Context, *CriptCoin) (*CriptCoinReply, error)
	mustEmbedUnimplementedCriptCoinApiServer()
}

// UnimplementedCriptCoinApiServer must be embedded to have forward compatible implementations.
type UnimplementedCriptCoinApiServer struct {
}

func (UnimplementedCriptCoinApiServer) List(context.Context, *EmptyParameter) (*CriptCoinList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCriptCoinApiServer) ListWithTotalVotes(context.Context, *EmptyParameter) (*CriptCoinList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithTotalVotes not implemented")
}
func (UnimplementedCriptCoinApiServer) Find(context.Context, *CriptCoinFilter) (*CriptCoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedCriptCoinApiServer) Insert(context.Context, *CriptCoin) (*CriptCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedCriptCoinApiServer) Update(context.Context, *CriptCoin) (*CriptCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCriptCoinApiServer) Delete(context.Context, *CriptCoin) (*CriptCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCriptCoinApiServer) mustEmbedUnimplementedCriptCoinApiServer() {}

// UnsafeCriptCoinApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriptCoinApiServer will
// result in compilation errors.
type UnsafeCriptCoinApiServer interface {
	mustEmbedUnimplementedCriptCoinApiServer()
}

func RegisterCriptCoinApiServer(s grpc.ServiceRegistrar, srv CriptCoinApiServer) {
	s.RegisterService(&CriptCoinApi_ServiceDesc, srv)
}

func _CriptCoinApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriptCoinApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/criptcoinvote.CriptCoinApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriptCoinApiServer).List(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriptCoinApi_ListWithTotalVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriptCoinApiServer).ListWithTotalVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/criptcoinvote.CriptCoinApi/ListWithTotalVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriptCoinApiServer).ListWithTotalVotes(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriptCoinApi_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CriptCoinFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriptCoinApiServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/criptcoinvote.CriptCoinApi/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriptCoinApiServer).Find(ctx, req.(*CriptCoinFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriptCoinApi_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CriptCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriptCoinApiServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/criptcoinvote.CriptCoinApi/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriptCoinApiServer).Insert(ctx, req.(*CriptCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriptCoinApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CriptCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriptCoinApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/criptcoinvote.CriptCoinApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriptCoinApiServer).Update(ctx, req.(*CriptCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriptCoinApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CriptCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriptCoinApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/criptcoinvote.CriptCoinApi/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriptCoinApiServer).Delete(ctx, req.(*CriptCoin))
	}
	return interceptor(ctx, in, info, handler)
}

// CriptCoinApi_ServiceDesc is the grpc.ServiceDesc for CriptCoinApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriptCoinApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "criptcoinvote.CriptCoinApi",
	HandlerType: (*CriptCoinApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CriptCoinApi_List_Handler,
		},
		{
			MethodName: "ListWithTotalVotes",
			Handler:    _CriptCoinApi_ListWithTotalVotes_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _CriptCoinApi_Find_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _CriptCoinApi_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CriptCoinApi_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CriptCoinApi_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "criptcoinvote/criptcoin.proto",
}
